Function Code:


def factorial(n):
    if n == 0:
        return 1
    else:
        return n * factorial(n-1)

# Example:
print(factorial(5)) # Output: 120

Documentation:


"""
Function: factorial(n)
Parameters:
    - n (int): The number for which the factorial is to be calculated.

Returns:
    - int: The factorial of the given number.

Description:
    This function calculates the factorial of a given number using recursion. The factorial of a number is the product of all the numbers from 1 to that number. For example, the factorial of 5 is 5*4*3*2*1 = 120.

Example:
    print(factorial(5)) # Output: 120
    This will calculate the factorial of 5 and print the result, which is 120.
"""

Test Case:



import unittest

class TestFactorial(unittest.TestCase):

    def test_factorial(self):
        self.assertEqual(factorial(0), 1) # Test for n = 0
        self.assertEqual(factorial(5), 120) # Test for n = 5

if __name__ == '__main__':
    unittest.main()

Error Handling:


# Error handling improvements:
1. Add a try-except block to catch any potential errors that may occur during the execution of the function. This will prevent the program from crashing and allow for proper error handling.

2. Use the isinstance() function to check if the input n is an integer. If it is not, raise a TypeError to inform the user that the input must be an integer.

3. Add a check to ensure that the input n is not a negative number. If it is, raise a ValueError to inform the user that the input must be a positive integer.

4. Add a check to ensure that the input n is not too large for the factorial function to handle. If it is, raise an OverflowError to inform the user that the input is too large.

5. Add a check to ensure that the input n is not a float. If it is, raise a TypeError to inform the user that the input must be an integer.

6. Add a check to ensure that the input n is not a string. If it is, raise a TypeError to inform the user that the input must be an integer.

Example code:

def factorial(n):
    try:
        if not isinstance(n, int):
            raise TypeError("Input must be an integer.")

